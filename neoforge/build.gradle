plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev.legacyforge'
}

legacyForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from at.absolutePath
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        client {
            client()
        }
        data {
            data()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    implementation group: 'org.spongepowered', name: 'mixin', version: '0.8.5'
    annotationProcessor 'org.spongepowered:mixin:0.8.7:processor'
    //compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    //implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1"))
    modImplementation("maven.modrinth:forge-config-screens:v8.0.2-1.20.1-Forge")
    modImplementation("maven.modrinth:mixinbooster:0.1.0+1.20.1")
    implementation(files("./libs/pizzadelight-1.20.1-1.0.0.jar"))
    //compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    //implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1"))
}

mixin {
    add sourceSets.main, 'effectblacklist.refmap.json'
    config 'effectblacklist.mixins.json' // This can be done for multiple configs
    config 'effectblacklist.neoforge.mixins.json' // This can be done for multiple configs
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

jar {
    manifest.attributes([
            "MixinConfigs": "effectblacklist.mixins.json, effectblacklist.neoforge.mixins.json"
    ])
}